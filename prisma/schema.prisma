// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Define the User model
model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  password        String
  role            EnumRole @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Token           Token[]
  Book            Book[]
}

// Define the FamilyMember model
model FamilyMember {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) // Added createdAt field
  updatedAt DateTime @updatedAt // Added updatedAt field
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
}

// Define the Gender enum
enum EnumGender {
  MALE
  FEMALE
  OTHER
}

// Define the HairStyle enum
enum EnumHairStyle {
  LIGHT
  DARK
  MEDIUM
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  date        DateTime
  createdById Int?
}

model Book {
  id             Int            @id @default(autoincrement())
  name           String
  slug           String
  price          Decimal
  description    String
  imageUrl       String
  theme          Theme?         @relation(fields: [themeId], references: [id])
  themeId        Int?
  createdAt      DateTime       @default(now()) // Added createdAt field
  updatedAt      DateTime       @updatedAt // Added updatedAt field
  user           User           @relation(fields: [userId], references: [id])
  userId         Int
  BookAudience   BookAudience?
  bookAudienceId Int?
  FamilyMember   FamilyMember[]
}

model BookAudience {
  id        Int            @id @default(autoincrement())
  gender    EnumGender?
  glasses   Boolean?       @default(false)
  age       Int?
  hairStyle EnumHairStyle?
  book      Book           @relation(fields: [bookId], references: [id])
  bookId    Int            @unique
}

model Theme {
  id            Int      @id @default(autoincrement())
  name          String
  coverImageUrl String
  createdAt     DateTime @default(now()) // Added createdAt field
  updatedAt     DateTime @updatedAt // Added updatedAt field
  Book          Book[]
}

enum EnumRole {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}
